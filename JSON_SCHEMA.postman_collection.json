{
	"info": {
		"_postman_id": "980f51b6-893d-4499-902a-83bf7ca55ef2",
		"name": "JSON_SCHEMA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SWAPI",
			"item": [
				{
					"name": "https://swapi.dev/api/people/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a873734c-cf23-46a1-85dc-5dfee7466acd",
								"exec": [
									"var data=JSON.parse(responseBody);\r",
									"var schema={\r",
									"    \"type\":\"object\", \r",
									"    \"requires\": [\"name\",\"homeworld\",\"films\",\"species\",\"vechcles\", \"starships\"],\r",
									"    \"properties\":{\r",
									"        \"name\": {\"type\":\"string\"},\r",
									"        \"homeworld\": {\"type\":\"string\"},\r",
									"        \"films\": {\r",
									"            \"type\":\"array\",\r",
									"        \"items\":{\"type\":\"string\"}\r",
									"        },\r",
									"        \"species\": {\r",
									"            \"type\":\"array\",\r",
									"        \"items\": {\"type\":\"string\"}\r",
									"    },\r",
									"    \"vechcles\": {\r",
									"            \"type\":\"array\",\r",
									"        \"items\": {\"type\":\"string\"}\r",
									"    },\r",
									"        \"starships\": {\r",
									"            \"type\":\"array\",\r",
									"        \"items\": {\"type\":\"string\"}\r",
									"    },\r",
									"}\r",
									"};\r",
									"pm.test('Body is correct', function(){\r",
									"pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://swapi.dev/api/people/1",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								"people",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://swapi.dev/api/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2f68e9a-10ac-4935-a312-24f775340038",
								"exec": [
									"//1. Correct response format JSON\r",
									"pm.test(\"Correct response format JSON\", function(){\r",
									"    pm.response.to.have.jsonBody()\r",
									"});\r",
									"\r",
									"//2. We have all the declared fields in the response\r",
									"pm.test(\"We have all the declared fields in the response\", function(){\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"people\");\r",
									" pm.expect(jsonData).to.have.property(\"planets\");\r",
									" pm.expect(jsonData).to.have.property(\"films\");\r",
									" pm.expect(jsonData).to.have.property(\"species\");\r",
									" pm.expect(jsonData).to.have.property(\"vehicles\");\r",
									" pm.expect(jsonData).to.have.property(\"starships\");\r",
									"});\r",
									"\r",
									"//3. Field value is not NULL\r",
									"pm.test(\"Ckeck if value in not NULL\", function(){\r",
									"var jsonData = pm.response.json();\r",
									"pm.expect(jsonData.people).not.equal(null);\r",
									"pm.expect(jsonData.planets).not.equal(null)\r",
									"pm.expect(jsonData.films).not.equal(null)\r",
									"pm.expect(jsonData.species).not.equal(null)\r",
									"pm.expect(jsonData.vehicles).not.equal(null)\r",
									"pm.expect(jsonData.starships).not.equal(null)\r",
									"});\r",
									"\r",
									"//4. Check if value is not empty\r",
									"pm.test(\"Check if value is not empty\", function(){\r",
									"var jsonData=pm.response.json();\r",
									"pm.expect(jsonData.people).not.equal(\"\");\r",
									"pm.expect(jsonData.planets).not.equal(\"\");\r",
									"pm.expect(jsonData.films).not.equal(\"\");\r",
									"pm.expect(jsonData.species).not.equal(\"\");\r",
									"pm.expect(jsonData.vehicles).not.equal(\"\");\r",
									"pm.expect(jsonData.starships).not.equal(\"\");\r",
									"});\r",
									"\r",
									"//5. Check if field corresponds to a special value\r",
									"pm.test(\"Check if field corresponds to a special value\",function(){\r",
									"var jsonData=pm.response.json();\r",
									"pm.expect(jsonData.people).to.equal(\"http://swapi.dev/api/people/\");\r",
									"pm.expect(jsonData.planets).to.equal(\"http://swapi.dev/api/planets/\");\r",
									"pm.expect(jsonData.films).to.equal(\"http://swapi.dev/api/films/\");\r",
									"pm.expect(jsonData.species).to.equal(\"http://swapi.dev/api/species/\");\r",
									"pm.expect(jsonData.vehicles).to.equal(\"http://swapi.dev/api/vehicles/\");\r",
									"pm.expect(jsonData.starships).to.equal(\"http://swapi.dev/api/starships/\");\r",
									"\r",
									"});\r",
									"\r",
									"//6. Status code 200\r",
									"pm.test(\"Status code 200\", function(){\r",
									"pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"//7. Status message is ok\r",
									"pm.test(\"Status message is ok\",function(){\r",
									"pm.response.to.have.status(\"OK\");\r",
									"\r",
									"});\r",
									"//8. Check response time, it has to be less 1000ms\r",
									"pm.test(\"Check response time, it has to be less 1000ms\", function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//9. There is a specific header in the response\r",
									"pm.test(\"There is a specific header in the response\", function(){\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//10. The response has a specific header with a specific value\r",
									"pm.test(\"The response has a specific header with a specific value\", function(){\r",
									"pm.response.to.be.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"//11. Check cookies\r",
									"pm.test(\"Check cookies\", function(){\r",
									"pm.cookies.has(\"__cfduid\");\r",
									"\r",
									"});\r",
									"\r",
									"//12. Cookies has value\r",
									"pm.test(\"Cookies has value\", function(){\r",
									"try{\r",
									"    var MY_COOKIE = pm.cookies.get(\"__cfduid\");\r",
									"    console.log(MY_COOKIE);\r",
									"}catch(e){\r",
									"    console.log(\"SOME PROBLEMS WITH COOKIES -->\" + e);\r",
									"}\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://swapi.dev/api/",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "https://swapi.dev/api/people/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89ebe95d-3007-43e3-b0ba-a17caa751c22",
						"exec": [
							"var data=JSON.parse(responseBody);\r",
							"\r",
							"var schema={\r",
							"// specify the type of object\r",
							"\"type\": \"object\",\r",
							"\r",
							"//specify requires properties\r",
							"\"requires\":[\"people\",\"planets\",\"films\",\"species\",\"vehicles\",\"starship\"],\r",
							"\r",
							"//describe the properties\r",
							"\"properties\":{\r",
							"    \"people\":{\"type\":\"string\"},   \r",
							"    \"films\":{\"type\":\"string\"},\r",
							"    \"species\":{\"type\":\"string\"},\r",
							"    \"vehicles\":{\"type\":\"string\"},\r",
							"    \"starship\":{\"type\":\"string\"},\r",
							"}\r",
							"};\r",
							"pm.test('Body is corect', function(){\r",
							"pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://6a01e68d-4349-43d3-8e09-5ffa4c7066d5.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://6a01e68d-4349-43d3-8e09-5ffa4c7066d5.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"6a01e68d-4349-43d3-8e09-5ffa4c7066d5",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://6a01e68d-4349-43d3-8e09-5ffa4c7066d5.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://6a01e68d-4349-43d3-8e09-5ffa4c7066d5.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"6a01e68d-4349-43d3-8e09-5ffa4c7066d5",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Tue, 26 May 2020 15:36:26 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1590507446"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=5da52379e1a636e7"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=a5667bcaf3f264d8"
						},
						{
							"key": "Content-Length",
							"value": "140"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\",\n  \n    }\n}"
				},
				{
					"name": "https://6a01e68d-4349-43d3-8e09-5ffa4c7066d5.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Sergei\"}"
						},
						"url": {
							"raw": "https://6a01e68d-4349-43d3-8e09-5ffa4c7066d5.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"6a01e68d-4349-43d3-8e09-5ffa4c7066d5",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Tue, 26 May 2020 15:39:35 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1590507446"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=5da52379e1a636e7"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=a5667bcaf3f264d8"
						},
						{
							"key": "Content-Length",
							"value": "74"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Sergei\",\n        \"sttus\":\"created\",\n        \"message\": \"success\",\n  \n    }\n}"
				}
			]
		},
		{
			"name": "https://6a01e68d-4349-43d3-8e09-5ffa4c7066d5.mock.pstmn.io",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Sergei\"}"
				},
				"url": {
					"raw": "https://6a01e68d-4349-43d3-8e09-5ffa4c7066d5.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"6a01e68d-4349-43d3-8e09-5ffa4c7066d5",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://6a01e68d-4349-43d3-8e09-5ffa4c7066d5.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Sergei\"}"
						},
						"url": {
							"raw": "https://6a01e68d-4349-43d3-8e09-5ffa4c7066d5.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"6a01e68d-4349-43d3-8e09-5ffa4c7066d5",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Tue, 26 May 2020 15:39:35 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1590507446"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=5da52379e1a636e7"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=a5667bcaf3f264d8"
						},
						{
							"key": "Content-Length",
							"value": "74"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Sergei\",\n        \"sttus\":\"created\",\n        \"message\": \"success\",\n  \n    }\n}"
				},
				{
					"name": "https://6a01e68d-4349-43d3-8e09-5ffa4c7066d5.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://6a01e68d-4349-43d3-8e09-5ffa4c7066d5.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"6a01e68d-4349-43d3-8e09-5ffa4c7066d5",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Tue, 26 May 2020 15:36:26 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1590507446"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=5da52379e1a636e7"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=a5667bcaf3f264d8"
						},
						{
							"key": "Content-Length",
							"value": "140"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\",\n  \n    }\n}"
				}
			]
		}
	],
	"protocolProfileBehavior": {}
}